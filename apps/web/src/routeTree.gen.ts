/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TodosRouteImport } from './routes/todos'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as DashboardOrgSlugRouteImport } from './routes/dashboard/$orgSlug'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth/$'

const TodosRoute = TodosRouteImport.update({
  id: '/todos',
  path: '/todos',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardOrgSlugRoute = DashboardOrgSlugRouteImport.update({
  id: '/dashboard/$orgSlug',
  path: '/dashboard/$orgSlug',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/todos': typeof TodosRoute
  '/dashboard/$orgSlug': typeof DashboardOrgSlugRoute
  '/dashboard': typeof DashboardIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/todos': typeof TodosRoute
  '/dashboard/$orgSlug': typeof DashboardOrgSlugRoute
  '/dashboard': typeof DashboardIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/todos': typeof TodosRoute
  '/dashboard/$orgSlug': typeof DashboardOrgSlugRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/todos'
    | '/dashboard/$orgSlug'
    | '/dashboard'
    | '/api/auth/$'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/todos' | '/dashboard/$orgSlug' | '/dashboard' | '/api/auth/$'
  id:
    | '__root__'
    | '/'
    | '/todos'
    | '/dashboard/$orgSlug'
    | '/dashboard/'
    | '/api/auth/$'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TodosRoute: typeof TodosRoute
  DashboardOrgSlugRoute: typeof DashboardOrgSlugRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/todos': {
      id: '/todos'
      path: '/todos'
      fullPath: '/todos'
      preLoaderRoute: typeof TodosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/$orgSlug': {
      id: '/dashboard/$orgSlug'
      path: '/dashboard/$orgSlug'
      fullPath: '/dashboard/$orgSlug'
      preLoaderRoute: typeof DashboardOrgSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TodosRoute: TodosRoute,
  DashboardOrgSlugRoute: DashboardOrgSlugRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
